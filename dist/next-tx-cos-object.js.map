{"version":3,"sources":["next-tx-cos-object.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"next-tx-cos-object.js","sourcesContent":["(function () {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('@feizheng/next-js-core2');\n  var COS = require('cos-nodejs-sdk-v5');\n  var Promise = require('bluebird');\n  var DEFAULT_OPTIONS = {\n    SecretId: 'COS_SECRETID',\n    SecretKey: 'COS_SECRETKEY'\n  };\n\n  var API_HOOKS = {\n    del: 'deleteObjectAsync',\n    dels: 'deleteMultipleObjectAsync'\n  };\n\n  var NxTxCosObject = nx.declare('nx.TxCosObject', {\n    methods: {\n      init: function (inOptions) {\n        this.options = nx.mix(null, DEFAULT_OPTIONS, inOptions);\n        this.cos = new COS(this.options);\n        Promise.promisifyAll(this.cos, { context: this.cos });\n      },\n      'put,del,dels': function (inName) {\n        return function (inOptions) {\n          this.parseOptions(inOptions);\n          return this.cos[API_HOOKS[inName] || inName + 'ObjectAsync'](inOptions);\n        };\n      },\n      empty: function (inOptions) {\n        var self = this;\n        this.parseOptions(inOptions);\n\n        return new Promise(function (resolve, reject) {\n          self.cos.getBucketAsync(inOptions).then(function (res) {\n            var objs = res.Contents.map(function (item) {\n              return { Key: item.Key };\n            });\n            var reqs = nx.mix(null, inOptions, { Objects: objs });\n            self\n              .dels(reqs)\n              .then(function (rst) {\n                resolve(rst);\n              })\n              .catch(function (err) {\n                reject(err);\n              });\n          });\n        });\n      },\n      parseOptions: function (inOptions) {\n        if (!inOptions) return;\n        var appId = this.options.id;\n        var bucket = inOptions.Bucket;\n        bucket && (inOptions.Bucket = bucket.includes(appId) ? bucket : bucket + '-' + appId);\n      }\n    }\n  });\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = NxTxCosObject;\n  }\n})();\n"]}